name: Build

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v2
        with:
          # Fetches entire history, so we can analyze commits since last tag
          fetch-depth: 0
      - name: Install
        run: npm ci
      - name: Check
        run: npm run prettier-check
      - name: Build
        run: npm run build
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          configFilePath: .github/version_config.yml
      - name: Determine Release Info
        id: release
        run: |
          tag=v${{ steps.gitversion.outputs.semVer }}
          from_ref_exclusive=${{ steps.gitversion.outputs.versionSourceSha }}

          [[ -z "${{ steps.gitversion.outputs.preReleaseNumber }}" ]] && \
            is_prerelease=false || \
            is_prerelease=true

          [[ $is_prerelease ]] && \
            to_ref_inclusive=${{ steps.gitversion.outputs.sha }} || \
            to_ref_inclusive=$tag

          echo "::set-output name=is_prerelease::$is_prerelease"
          echo "::set-output name=tag::$tag"
          echo "::set-output name=from_ref_exclusive::$from_ref_exclusive"
          echo "::set-output name=to_ref_inclusive::$to_ref_inclusive"
      - name: Create tag
        if: steps.release.outputs.is_prerelease == false
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ steps.release.outputs.tag }}",
              sha: context.sha
            });
      - name: Generate Release Notes
        id: release_notes
        uses: ./
        with:
          version: ${{ steps.release.outputs.tag }}
          from_ref_exclusive: ${{ steps.release.outputs.from_ref_exclusive }}
          to_ref_inclusive: ${{ steps.release.outputs.to_ref_inclusive }}
      - name: Create Release
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: "${{ steps.release.outputs.tag }}",
              body: `${{ steps.release_notes.outputs.release_notes }}`,
              prerelease: ${{ steps.release.outputs.is_prerelease }}
            });
