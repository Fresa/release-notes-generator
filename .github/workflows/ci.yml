name: Build

on:
  push:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v2
        with:
          # Fetches entire history, so we can analyze commits since last tag
          fetch-depth: 0
      - uses: actions/setup-node@v2
        with:
          node-version: 12
      - name: Test Fetching Artifact
        run: |
          GITHUB_ACTION_REPOSITORY=Fresa/release-notes-generator \
          GITHUB_ACTION_REF=vTEST \
          node fetch_artifact.js
      - name: Clean dist
        run: |
          rm -rf dist
      - name: Install
        run: npm ci
      - name: Check
        run: npm run prettier-check
      - name: Build
        run: npm run publish
      - name: Assert Artifact Downloaded
        run: ls -d $GITHUB_WORKSPACE/dist/index.js
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.7
        with:
          versionSpec: '5.x'
      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v0
        with:
          useConfigFile: true
          configFilePath: .github/version_config.yml
      - name: Determine Release Info
        id: release
        run: |
          default_branch=$(git remote show origin | awk '/HEAD branch/ {print $NF}')
          log_format="{^^^^hash^^^^: ^^^^%H^^^^,^^^^message^^^^:^^^^%B^^^^},"

          if [ "${{ github.ref_name }}" == "$default_branch" ]; then
            # Is this a merge commit?
            if [ $(git rev-parse HEAD^2 >/dev/null 2>/dev/null) ]; then
              # Find what commit the merged branch branched from originally
              from_ref_exclusive=$(diff -u <(git rev-list --first-parent HEAD^2) \
                      <(git rev-list --first-parent HEAD) | \
                  sed -ne 's/^ //p' | head -1)
              # Find the commits
              git log $from_ref_exclusive..HEAD^2 --first-parent --pretty=format:"$log_format" > commit_logs.txt
            else
              # Use this commit
              from_ref_exclusive=$(git log -2 --pretty=format:"%H" | tail -1)
              git log -1 --pretty=format:"$log_format" > commit_logs.txt
            fi
          else
            # This will find the commits since this branch branched from default branch 
            from_ref_exclusive=$(git rev-list $(git rev-list $default_branch.. --first-parent | tail -1)^ -n 1)
            git log $default_branch.. --first-parent --pretty=format:"$log_format" > commit_logs.txt
          fi

          cat commit_logs.txt | \
            sed 's/"/\\"/g' | \
            sed 's/\^^^^/"/g' | \
            sed "$ s/,$//" | \
            sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/ /g' | \
            awk 'BEGIN { print("[") } { print($0) } END { print("]") }' > commit_logs.json

          [[ -z "${{ steps.gitversion.outputs.preReleaseTag }}" ]] && \
            is_prerelease=false || \
            is_prerelease=true

          [[ $is_prerelease == true ]] && \
            tag=v${{ steps.gitversion.outputs.majorMinorPatch }}-pre-${{ steps.gitversion.outputs.shortSha }} || \
            tag=v${{ steps.gitversion.outputs.majorMinorPatch }}

          echo "::set-output name=is_prerelease::$is_prerelease"
          echo "::set-output name=tag::$tag"
          echo "::set-output name=from_ref_exclusive::$from_ref_exclusive"
      - name: Create Tag
        uses: actions/github-script@v3
        with:
          script: |
            github.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/${{ steps.release.outputs.tag }}",
              sha: "${{ steps.gitversion.outputs.sha }}"
            });
      - name: Generate Release Notes
        id: release_notes
        uses: ./
        with:
          version: ${{ steps.release.outputs.tag }}
          from_ref_exclusive: ${{ steps.release.outputs.from_ref_exclusive }}
          to_ref_inclusive: ${{ steps.release.outputs.tag }}
          path_to_commits: ./commit_logs.json
      - name: Package
        run: zip -rj artifacts.zip dist
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: ${{ steps.release_notes.outputs.release_notes }}
          tag_name: ${{ steps.release.outputs.tag }}
          prerelease: ${{ steps.release.outputs.is_prerelease }}
          files: artifacts.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Update Latest Minor Tag
        uses: EndBug/latest-tag@v1
        if: steps.release.outputs.is_prerelease == 'false'
        with:
          tag-name: v${{ steps.gitversion.outputs.major }}
          description: ${{ steps.release.outputs.tag }}
      - name: Update Latest Patch Tag
        uses: EndBug/latest-tag@v1
        if: steps.release.outputs.is_prerelease == 'false'
        with:
          tag-name: v${{ steps.gitversion.outputs.major }}.${{ steps.gitversion.outputs.minor }}
          description: ${{ steps.release.outputs.tag }}
